% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/omni_classify.R
\name{omni.classify}
\alias{omni.classify}
\title{PDACMMolecularOmniClassifier}
\usage{
omni.classify(
  expmat,
  batch = TRUE,
  gene_id = "EnsemblID",
  classifier = c("Collisson", "Moffitt", "Bailey", "Puleo", "Chan-Seng-Yue",
    "PDAConsensus"),
  stroma = FALSE,
  stroma_classifier = ""
)
}
\arguments{
\item{expmat}{Matrix of RNAseq raw counts}

\item{batch}{Boolean to apply or not batch correction (TRUE or FALSE; default = TRUE)}

\item{gene_id}{Type of gene ID used (EnsemblID, EntrezID, or GeneSymbol; default = EnsemblID)}

\item{classifier}{Classifier desired to make the classification of tumor fractions
('Collisson', 'Moffitt', 'Bailey', 'Puleo', 'Chan-Seng-Yue', and 'PDAConsensus'; 
default = c('Collisson', 'Moffitt', 'Bailey', 'Puleo', 'Chan-Seng-Yue', 'PDAConsensus'))}

\item{stroma}{Boolean to include or not classification of stroma (TRUE or FALSE; default = FALSE)}

\item{stroma_classifier}{Classifier desired to make the classification of
stroma fractions ('Moffit', 'Maurer', and 'PDAConsensus'; default = '')}
}
\value{
classification: a list containing three list. The first list contains 
the proportions of tumor and stroma of the samples. The second list corresponds
to the classification of tumor and it contains as much lists as classifiers length.
The third list corresponds to the classification of stroma and it contains
as much lists as stroma_classifiers length. Second and third list are only
included if stroma = TRUE
}
\description{
Classification of tumor and stroma according to different classifiers.
Classifiers available for tumor fractions:
 1. Collisson et al., 2011
 2. Moffitt et al., 2015
 3. Bailey et al., 2016
 4. Puleo et al, 2018
 5. Chan-Seng-Yue, 2020
 6. PDAConsensus
Classifiers available for stroma fractions:
 1. Moffitt et al., 2016
 2. Maurer et al., 2019
 3. PDAConsensus
}
\examples{
library(PDACMOC)

file1 <- system.file('examples', 'example.R', package = 'PDACMOC')
dir <- file.path(dirname(file1), '../saved_workspaces/example.RData')
#load(dir)
rm(file1)

reticulate::use_python("~/Software/miniconda3/envs/PDACMOC/bin/python3.11", required = TRUE)

file2 <- system.file('training_data', 'all_datasets_corrected.csv', package = 'PDACMOC')

samples <- read.csv(file2, row.names = 1, check.names = FALSE)
rm(file2)

new_samples <- PDACMOC:::import.and.normalize(samples, batch = FALSE, gene_id = 'EnsemblID')

results_collisson <- PDACMOC:::collisson.classify(new_samples)

results_moffitt <- PDACMOC:::moffitt.classify(new_samples)

results_bailey <- PDACMOC:::bailey.classify(new_samples)

results_puleo <- PDACMOC:::puleo.classify(new_samples)

results_chan <- PDACMOC:::chan.classify(new_samples)

results_consensus <- PDACMOC:::PDAConsensus.classify(new_samples)

vm_result <- PDACMOC:::virtual.microdissect(new_samples)

results_stroma_moffitt <- PDACMOC:::stroma.moffitt.classify(vm_result$vm_S)

results_stroma_maurer <- PDACMOC:::stroma.maurer.classify(vm_result$vm_S)

results_stroma_consensus <- PDACMOC:::stroma.PDAConsensus.classify(vm_result$vm_S)

classification_tumor <- PDACMOC::omni.classify(samples, batch = FALSE, gene_id = 'EnsemblID',
                                               classifier = c('Collisson', 'Moffitt', 'Bailey',
                                                              'Puleo', 'Chan-Seng-Yue', 'PDAConsensus'))
 
classification_all <- PDACMOC::omni.classify(samples, batch = FALSE, gene_id = 'EnsemblID',
                                             classifier = c('Collisson', 'Moffitt', 'Bailey',
                                                            'Puleo', 'Chan-Seng-Yue', 'PDAConsensus'),                                              
                                             stroma = TRUE,
                                             stroma_classifier = c('Moffitt',
                                                                   'Maurer',
                                                                   'PDAConsensus'))

# change path to your browser
options(browser = '/usr/bin/firefox')
shinyjs::useShinyjs()
runPDACMOC()

#save.image(dir)
}
\author{
Villoslada-Blanco, Pablo
}
